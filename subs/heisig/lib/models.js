// Generated by CoffeeScript 1.6.3
(function() {
  var Card, Cards, Deck, possessiveWord, root, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  possessiveWord = function(word) {
    return [word, word.replace(/'s\b/, '')].join(' ');
  };

  Card = (function(_super) {
    __extends(Card, _super);

    function Card() {
      _ref = Card.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Card.prototype.initialize = function() {
      this.set('tokens', _.flatten([this.tokenize(this.get('keyword')), this.get('no').toString(), this.get('kanji')]));
      if (this.get('keyword').indexOf("'") >= 0) {
        return console.log(this.get('tokens'));
      }
    };

    Card.prototype.tokenize = function(str) {
      return str.toLowerCase().replace(/-/, ' ').replace(/\w+'s\b/, possessiveWord).replace(/[^a-z' ]/g, '').trim().split(/\s+/);
    };

    return Card;

  })(Backbone.Model);

  Cards = (function(_super) {
    __extends(Cards, _super);

    function Cards() {
      _ref1 = Cards.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Cards.prototype.model = Card;

    return Cards;

  })(Backbone.Collection);

  Deck = (function(_super) {
    __extends(Deck, _super);

    function Deck() {
      _ref2 = Deck.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Deck.prototype.url = 'heisig.json';

    Deck.prototype.initialize = function() {
      this.set('cards', new Cards());
      return this.on('change:filter', function(deck, query) {
        return Backbone.history.navigate(query);
      });
    };

    Deck.prototype.parse = function(resp) {
      var result;
      return result = {
        cards: new Cards(resp)
      };
    };

    Deck.prototype.filtered = function() {
      var cards, matchers, query;
      query = this.get('filter');
      if (!query) {
        return this.get('cards');
      }
      matchers = starific(query);
      return cards = this.get('cards').filter(function(card) {
        return matchers.any(card.get('tokens'));
      });
    };

    return Deck;

  })(Backbone.Model);

  root = this;

  root.Deck = Deck;

}).call(this);
