// Generated by CoffeeScript 1.6.3
(function() {
  var Card, Cards, Deck, root, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = (function(_super) {
    __extends(Card, _super);

    function Card() {
      _ref = Card.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Card;

  })(Backbone.Model);

  Cards = (function(_super) {
    __extends(Cards, _super);

    function Cards() {
      _ref1 = Cards.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Cards.prototype.model = Card;

    return Cards;

  })(Backbone.Collection);

  Deck = (function(_super) {
    __extends(Deck, _super);

    function Deck() {
      _ref2 = Deck.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Deck.prototype.url = 'heisig.json';

    Deck.prototype.initialize = function() {
      var uniques;
      this.set('cards', new Cards());
      this.on('change:filter', function(deck, query) {
        return Backbone.history.navigate(query);
      });
      this.uniques = uniques = {};
      return this.on('change:cards', function(deck, cards) {
        var unique;
        unique = {};
        return cards.forEach(function(card) {
          uniques[card.get('no')] = card;
          return uniques[card.get('kanji')] = card;
        });
      });
    };

    Deck.prototype.parse = function(resp) {
      var result;
      return result = {
        cards: new Cards(resp)
      };
    };

    Deck.prototype.filtered = function() {
      var error, query, relaxed, unique;
      query = this.get('filter');
      if (!query) {
        return this.get('cards');
      }
      unique = this.uniques[query];
      if (unique) {
        return [unique];
      }
      try {
        query = new RegExp(query, "i");
      } catch (_error) {
        error = _error;
        return [];
      }
      relaxed = this.get('relaxed');
      return this.get('cards').filter(function(card) {
        var _ref3;
        if (card.get('keyword').match(query)) {
          return true;
        }
        if (relaxed && ((_ref3 = card.get('primitives')) != null ? _ref3.match(query) : void 0)) {
          return true;
        }
        return false;
      });
    };

    return Deck;

  })(Backbone.Model);

  root = this;

  root.Deck = Deck;

}).call(this);
